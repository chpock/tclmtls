# Copyright (c) 2024 Konstantin Kushnir <chpock@gmail.com>
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require mtls

source [file join [testsDirectory] helper.tcl]

set selfsignedCert [file join [testsDirectory] certs selfsigned-cert.pem]
set selfsignedKey  [file join [testsDirectory] certs selfsigned-key.pem]

set port [random_port]

# -require is true by default, so an error is expected here
test mtls-connections-1.1.1 {Check TLS 1.2 connections to server with self-signed certificate, -require is default} -constraints { server client } -setup {
    set script [makeFile [substvars {
        package require mtls
        proc accept { sock addr port } {
            if { [catch { gets $sock } res] } {
                puts "OOPS"
            } else {
                puts "OK $res"
            }
            close $sock
            set ::x done
        }
        set s [mtls::socket -server accept -certfile $selfsignedCert \
            -tls1.2 true -tls1.3 false \
            -keyfile $selfsignedKey -myaddr localhost $port]
        set timer [after 2000 [list set x timeout]]
        puts "ready"
        vwait x
        after cancel $timer
        close $s
        puts $x
    }] script]
} -body {
    set s [open "|[interpreter] $script" r]
    set res [list {}]
    lappend res [gets $s]
    if { [catch {
        set sock [mtls::socket -tls1.2 true -tls1.3 false localhost $port]
        puts $sock hello
        flush $sock
    } err] } {
        lappend res $err
    } {
        lappend res "OK"
    }
    catch { close $sock }
    lappend res [gets $s]
    lappend res [gets $s]
    close $s
    lappend res {}
    join $res \n
} -match glob -result {
ready
Handshake failed.*The certificate is not correctly signed by the trusted CA*
OOPS
done
} -cleanup {
   catch { close $s }
   catch { close $sock }
   unset -nocomplain s res sock
}

# -require is set to false, so a successful connection is expected here
test mtls-connections-1.1.2 {Check TLS 1.2 connections to server with self-signed certificate, -require is false} -constraints { server client } -setup {
    set script [makeFile [substvars {
        package require mtls
        proc accept { sock addr port } {
            if { [catch { gets $sock } res] } {
                puts "OOPS"
            } else {
                puts "OK $res"
            }
            close $sock
            set ::x done
        }
        set s [mtls::socket -server accept -certfile $selfsignedCert \
            -tls1.2 true -tls1.3 false \
            -keyfile $selfsignedKey -myaddr localhost $port]
        set timer [after 2000 [list set x timeout]]
        puts "ready"
        vwait x
        after cancel $timer
        close $s
        puts $x
    }] script]
} -body {
    set s [open "|[interpreter] $script" r]
    set res [list {}]
    lappend res [gets $s]
    if { [catch {
        set sock [mtls::socket -tls1.2 true -tls1.3 false -require false localhost $port]
        puts $sock hello
        flush $sock
    } err] } {
        lappend res $err
    } {
        lappend res "OK"
    }
    catch { close $sock }
    lappend res [gets $s]
    lappend res [gets $s]
    close $s
    lappend res {}
    join $res \n
} -match glob -result {
ready
OK
OK hello
done
} -cleanup {
   catch { close $s }
   catch { close $sock }
   unset -nocomplain s res sock
}

# -require is true by default, so an error is expected here
test mtls-connections-1.2.1 {Check TLS 1.3 connections to server with self-signed certificate, -require is default} -constraints { server client } -setup {
    set script [makeFile [substvars {
        package require mtls
        proc accept { sock addr port } {
            if { [catch { gets $sock } res] } {
                puts "OOPS"
            } else {
                puts "OK $res"
            }
            close $sock
            set ::x done
        }
        set s [mtls::socket -server accept -certfile $selfsignedCert \
            -tls1.2 false -tls1.3 true \
            -keyfile $selfsignedKey -myaddr localhost $port]
        set timer [after 2000 [list set x timeout]]
        puts "ready"
        vwait x
        after cancel $timer
        close $s
        puts $x
    }] script]
} -body {
    set s [open "|[interpreter] $script" r]
    set res [list {}]
    lappend res [gets $s]
    if { [catch {
        set sock [mtls::socket -tls1.2 false -tls1.3 true localhost $port]
        puts $sock hello
        flush $sock
    } err] } {
        lappend res $err
    } {
        lappend res "OK"
    }
    catch { close $sock }
    lappend res [gets $s]
    lappend res [gets $s]
    close $s
    lappend res {}
    join $res \n
} -match glob -result {
ready
Handshake failed.*The certificate is not correctly signed by the trusted CA*
OOPS
done
} -cleanup {
   catch { close $s }
   catch { close $sock }
   unset -nocomplain s res sock
}

# -require is set to false, so a successful connection is expected here
test mtls-connections-1.2.2 {Check TLS 1.3 connections to server with self-signed certificate, -require is false} -constraints { server client } -setup {
    set script [makeFile [substvars {
        package require mtls
        proc accept { sock addr port } {
            if { [catch { gets $sock } res] } {
                puts "OOPS"
            } else {
                puts "OK $res"
            }
            close $sock
            set ::x done
        }
        set s [mtls::socket -server accept -certfile $selfsignedCert \
            -tls1.2 false -tls1.3 true \
            -keyfile $selfsignedKey -myaddr localhost $port]
        set timer [after 2000 [list set x timeout]]
        puts "ready"
        vwait x
        after cancel $timer
        close $s
        puts $x
    }] script]
} -body {
    set s [open "|[interpreter] $script" r]
    set res [list {}]
    lappend res [gets $s]
    if { [catch {
        set sock [mtls::socket -tls1.2 false -tls1.3 true -require false localhost $port]
        puts $sock hello
        flush $sock
    } err] } {
        lappend res $err
    } {
        lappend res "OK"
    }
    catch { close $sock }
    lappend res [gets $s]
    lappend res [gets $s]
    close $s
    lappend res {}
    join $res \n
} -match glob -result {
ready
OK
OK hello
done
} -cleanup {
   catch { close $s }
   catch { close $sock }
   unset -nocomplain s res sock
}

# cleanup
cleanupTests
return
