# Copyright (c) 2024 Konstantin Kushnir <chpock@gmail.com>
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require mtls

source [file join [testsDirectory] helper.tcl]

test mtls-basic-1.1 { check that mtls::import preserves options } -constraints client -body {
    set s1 [socket google.com 443]
    set opts1 [chan configure $s1]
    set s2 [::mtls::import $s1]
    set opts2 [chan configure $s2]
    close $s2
    set res [list]
    foreach opt [lsort -unique [concat [dict keys $opts1] [dict keys $opts2]]] {
        if { $opt eq "-peername" } {
            # hostname in the -peername option is expected to be different for
            # google's ip address because it can be back-resolved
            # to different hostnames
            if { [dict exists $opts1 $opt] } {
                dict set opts1 $opt [lreplace [dict get $opts1 $opt] 1 1]
            }
            if { [dict exists $opts2 $opt] } {
                dict set opts2 $opt [lreplace [dict get $opts2 $opt] 1 1]
            }
        }
        if { ![dict exists $opts1 $opt] } {
            lappend res "opt\[$opt\]: doesn't exist in \$opts1"
        } elseif { ![dict exists $opts2 $opt] } {
            lappend res "opt\[$opt\]: doesn't exist in \$opts2"
        } elseif { [dict get $opts1 $opt] != [dict get $opts2 $opt] } {
            lappend res "opt\[$opt\]: [dict get $opts1 $opt] != [dict get $opts2 $opt]"
        }
    }
    join $res \n
} -result "" -cleanup {
   catch { close $s2 }
   catch { close $s1 }
   unset -nocomplain s1 s2 opts1 opts2 res opt
}

test mtls-basic-1.2 { check that mtls::import preserves options } -constraints client -body {
    set s1 [socket google.com 443]
    chan configure $s1 -blocking 0 -buffering none -buffersize 12345 -encoding iso8859-1 -eofchar Z -translation binary
    set opts1 [chan configure $s1]
    set s2 [::mtls::import $s1]
    set opts2 [chan configure $s2]
    close $s2
    set res [list]
    foreach opt [lsort -unique [concat [dict keys $opts1] [dict keys $opts2]]] {
        if { $opt eq "-peername" } {
            # hostname in the -peername option is expected to be different for
            # google's ip address because it can be back-resolved
            # to different hostnames
            if { [dict exists $opts1 $opt] } {
                dict set opts1 $opt [lreplace [dict get $opts1 $opt] 1 1]
            }
            if { [dict exists $opts2 $opt] } {
                dict set opts2 $opt [lreplace [dict get $opts2 $opt] 1 1]
            }
        }
        if { ![dict exists $opts1 $opt] } {
            lappend res "opt\[$opt\]: doesn't exist in \$opts1"
        } elseif { ![dict exists $opts2 $opt] } {
            lappend res "opt\[$opt\]: doesn't exist in \$opts2"
        } elseif { [dict get $opts1 $opt] != [dict get $opts2 $opt] } {
            lappend res "opt\[$opt\]: [dict get $opts1 $opt] != [dict get $opts2 $opt]"
        }
    }
    join $res \n
} -result "" -cleanup {
   catch { close $s2 }
   catch { close $s1 }
   unset -nocomplain s1 s2 opts1 opts2 res opt
}

test mtls-basic-2.1 { check that ::tls aliases are created } -setup {
    set script [makeFile {
        package require mtls
        puts [lsort [info commands ::tls::*]]
    } script]
} -body {
    set s [open "|[interpreter] $script" r]
    set res [gets $s]
    close $s
    set res
} -cleanup {
    catch { close $s }
    file delete -force $script
    unset -nocomplain script s res
} -result {::tls::ciphers ::tls::debug ::tls::handshake ::tls::import ::tls::init ::tls::protocols ::tls::socket ::tls::status ::tls::unimport ::tls::version}

test mtls-basic-2.2 { check that ::tls aliases are not created when namespace exists } -setup {
    set script [makeFile {
        namespace eval ::tls {}
        package require mtls
        puts [lsort [info commands ::tls::*]]
    } script]
} -body {
    set s [open "|[interpreter] $script" r]
    set res [gets $s]
    close $s
    set res
} -cleanup {
    catch { close $s }
    file delete -force $script
    unset -nocomplain script s res
} -result {}

test mtls-basic-3.1 { check mtls::status fields } -constraints client -body {
    set s1 [::mtls::socket google.com 443]
    ::mtls::handshake $s1
    set result [::mtls::status $s1]
    close $s1
    lsort [dict keys $result]
} -cleanup {
   catch { close $s1 }
   unset -nocomplain s1
} -result {cipher sbits sha1_hash sha256_hash version}

# cleanup
cleanupTests
return
